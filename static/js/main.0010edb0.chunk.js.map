{"version":3,"sources":["components/Sidebar/Sidebar.module.css","components/Sidebar/Navbar/Navbar.module.css","components/Users/Users.module.css","api/api.ts","reportWebVitals.ts","redux/users-reducer.ts","redux/profile-reducer.ts","redux/dialog-reducer.ts","redux/sidebar-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Sidebar/Navbar/Navbar.tsx","components/Sidebar/FriendsBar/FriendInfo/FriendInfo.tsx","components/Sidebar/FriendsBar/FriendsBar.tsx","components/Sidebar/FriendsBar/FriendsBarContainer.tsx","components/Sidebar/Sidebar.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","images/preloader.svg","components/common/Preloader.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","images/nodejs.png","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Sidebar/FriendsBar/FriendsBar.module.css","components/Sidebar/FriendsBar/FriendInfo/FriendInfo.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css"],"names":["module","exports","ResultCodes","ResultCodeForCaptcha","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","axiosInstance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","response","data","id","delete","post","profileAPI","userId","status","put","authAPI","email","password","rememberMe","FOLLOW_USER","UNFOLLOW_USER","SET_USERS","SET_CURRENT_PAGE","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","setIsFetching","isFetching","type","toggleFollowingProgress","initialState","users","totalUsersAmount","followingInProgress","ADD_NEW_PROFILE_POST","SET_USER_PROFILE","SET_USER_STATUS","setUserStatus","posts","message","likeCounts","userProfile","ADD_NEW_DIALOG_MESSAGE","dialogs","name","avatar","messages","friends","SET_AUTH_USER_DATA","setAuthUserData","login","isAuth","authMe","dispatch","resultCode","Success","INITIALIZED_SUCCESS","initialized","rootReducer","combineReducers","profilePage","state","action","newPost","Math","random","dialogPage","newMessage","usersPage","map","u","userID","followed","page","filter","sidebar","auth","form","formReducer","app","store","createStore","applyMiddleware","thunk","window","News","Music","Settings","Navbar","className","classes","nav","item","to","activeClassName","active","FriendInfo","props","cls","friend_info","friends_avatar","src","alt","FriendsBar","mappedFriends","fr","friends_bar","friends_info_wrapper","FriendsBarContainer","connect","Sidebar","DialogItem","dialog","Message","Element","ElementWrapper","meta","input","restProps","hasError","touched","error","formsControl","required","value","maxLengthCreator","length","Dialogs","mappedDialogs","d","mappedMessages","m","dialog_items","NewDialogMessageReduxForm","onSubmit","values","addNewDialogMessage","newDialogMessage","maxLength50","Textarea","reduxForm","handleSubmit","Field","component","validate","mapStateToProps","compose","addNewDialogMessageAC","Component","Preloader","preloader","ProfileStatus","editMode","activateMode","setState","deactivateMode","updateUserStatus","onChangeHandler","e","currentTarget","prevProps","prevState","this","onDoubleClick","autoFocus","onChange","onBlur","React","ProfileInfo","memo","background_image","photos","small","Post","MyPosts","mappedPosts","profilePageState","p","post_wrapper","NewPostMessageReduxForm","addPost","newPostMessage","maxLength10","placeholder","MyPostsContainer","addNewProfilePostAC","Profile","profile","ProfileContainer","match","params","authorizedUserId","toString","history","push","setUserProfileSuccess","getUserStatus","withRouter","Header","logout","header","logo","loginBlock","onClick","HeaderContainer","Input","LoginReduxForm","resultError","loginMe","stopSubmit","_error","formData","User","console","log","followSuccess","unFollowSuccess","wrapper_user","avatar_button","button_wrapper","disabled","some","uId","description","Users","pagesCount","ceil","pages","i","spanPagesName","selectedPage","spanPageNumber","onPageChanged","v1","getUsers","getPageSize","getTotalUsersAmount","getIsFetching","getCurrentPage","getFollowingInProgress","UsersContainer","setCurrentPage","requestUsers","Fragment","items","App","initializeApp","initialize","path","exact","render","DialogsContainer","promise","Promise","all","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0010edb0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__6nkTw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Navbar_item__xov82\",\"active\":\"Navbar_active__Emcac\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper_user\":\"Users_wrapper_user__5KpAw\",\"avatar\":\"Users_avatar__1xCRw\",\"avatar_button\":\"Users_avatar_button__3aZ1C\",\"button_wrapper\":\"Users_button_wrapper__3eNXm\",\"description\":\"Users_description__2vsI9\",\"spanPageNumber\":\"Users_spanPageNumber__k_2eh\",\"selectedPage\":\"Users_selectedPage__28CHT\",\"spanPagesName\":\"Users_spanPagesName__2u_69\"};","import axios from \"axios\";\r\nimport {UserProfileType} from \"../redux/profile-reducer\";\r\nimport {UserType} from \"../redux/users-reducer\";\r\n\r\n\r\n// axiosInstance - сконфигурированный axios, withCredentials: true - автоматически отправляет куки в запросах\r\nexport const axiosInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\r\n    // baseURL:'https://social-network.samuraijs.com/api/2.0.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"941c5469-5622-4ccf-b6fe-38f424109ae0\"\r\n    }\r\n})\r\n\r\n// response types\r\n\r\nexport enum ResultCodes {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\ntype DefaultResponseType<D> = {\r\n    data: D\r\n    fieldsErrors?: Array<string>\r\n    messages: Array<string>\r\n    resultCode: ResultCodes\r\n}\r\n\r\ntype GetUsersResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\ntype MeResponseDataType = {\r\n    email: string\r\n    id: number\r\n    login: string\r\n}\r\n\r\ntype LoginResponseType = {\r\n    data: { userId: number }\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    resultCode: ResultCodes | ResultCodeForCaptcha\r\n}\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return axiosInstance\r\n            .get<GetUsersResponseType>(`/users?page=${currentPage}&count=${pageSize}`).then(response => {\r\n                debugger\r\n                return response.data\r\n            })\r\n    },\r\n    unFollowUser(id: number) {\r\n        return axiosInstance\r\n            .delete<DefaultResponseType<{}>>(`/follow/${id}`).then(response => response.data)\r\n    },\r\n    followUser(id: number) {\r\n        return axiosInstance\r\n            .post<DefaultResponseType<{}>>(`/follow/${id}`).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return axiosInstance\r\n            .get<UserProfileType>(`/profile/${userId}`).then(response => response.data)\r\n    },\r\n    getStatus(userId: string) {\r\n        return axiosInstance\r\n            .get<string>(`/profile/status/${userId}`).then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return axiosInstance\r\n            .put<DefaultResponseType<{}>>(`/profile/status`, {\r\n                status\r\n            }).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return axiosInstance\r\n            .get<DefaultResponseType<MeResponseDataType>>('/auth/me').then(response => response.data)\r\n    },\r\n\r\n    loginMe(email: string, password: string, rememberMe: boolean) {\r\n        return axiosInstance\r\n            .post<LoginResponseType>('/auth/login', {\r\n                email,\r\n                password,\r\n                rememberMe\r\n            })\r\n            .then(response => response.data)\r\n    },\r\n\r\n    logout() {\r\n        return axiosInstance\r\n            .delete<DefaultResponseType<{}>>('/auth/login').then(response => response.data)\r\n    }\r\n\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {ResultCodes, usersAPI} from \"../api/api\";\r\nimport {AppThunkType} from \"./redux-store\";\r\n\r\nconst FOLLOW_USER = 'FOLLOW_USER'\r\nconst UNFOLLOW_USER = 'UNFOLLOW_USER'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n// const SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\n\r\n\r\n//types\r\n\r\nexport type UserPhotoType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type UserType = {\r\n    id: number\r\n    photos: UserPhotoType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n}\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersAmount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type UsersReducerACsType =\r\n    ReturnType<typeof follow>\r\n    | ReturnType<typeof unFollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n// | ReturnType<typeof setUserTotalCountAC>\r\n\r\n//actionCreators\r\nexport const follow = (userID: number) => {\r\n    return {\r\n        type: FOLLOW_USER,\r\n        userID\r\n\r\n    } as const\r\n}\r\n\r\nexport const unFollow = (userID: number) => {\r\n    return {\r\n        type: UNFOLLOW_USER,\r\n        userID\r\n    } as const\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPage = (page: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        page\r\n    } as const\r\n}\r\n\r\nexport const setIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n}\r\n\r\n// export const setUserTotalCountAC = (totalCount: number) => {\r\n//     return {\r\n//         type: SET_TOTAL_USERS_COUNT,\r\n//         totalCount\r\n//     } as const\r\n// }\r\n\r\n\r\n//initialState\r\nconst initialState: UsersPageType = {\r\n    users: [],\r\n    pageSize: 20,\r\n    totalUsersAmount: 135,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n//reducer\r\nexport const usersReducer = (state: UsersPageType = initialState, action: UsersReducerACsType): UsersPageType => {\r\n    switch (action.type) {\r\n        case FOLLOW_USER:\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: true} : u)}\r\n        case UNFOLLOW_USER:\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: false} : u)}\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.page}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        // case SET_TOTAL_USERS_COUNT:\r\n        //     return {...state, totalUsersAmount: action.totalCount}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//thunks\r\nexport const requestUsers = (currentPage: number, pageSize: number): AppThunkType => (dispatch) => {\r\n    //показываем preloader пока загружаются данные с сервера\r\n    dispatch(setIsFetching(true))\r\n\r\n    usersAPI.getUsers(currentPage, pageSize)\r\n        .then(data => {\r\n            dispatch(setUsers(data.items))\r\n            //убираем preloader после загрузки и установки в state новой порции users\r\n            dispatch(setIsFetching(false))\r\n            // this.props.setTotalUsersCount(response.data.totalCount)\r\n        })\r\n}\r\n\r\nexport const followSuccess = (id: number): AppThunkType => (dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, id))\r\n    usersAPI.followUser(id)\r\n        .then(data => {\r\n                if (data.resultCode === ResultCodes.Success) {\r\n                    dispatch(follow(id))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, id))\r\n            }\r\n        )\r\n}\r\n\r\nexport const unFollowSuccess = (id: number): AppThunkType => (dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, id))\r\n    usersAPI.unFollowUser(id)\r\n        .then(data => {\r\n                if (data.resultCode === ResultCodes.Success) {\r\n                    dispatch(unFollow(id))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, id))\r\n            }\r\n        )\r\n}\r\n","import {UserPhotoType} from \"./users-reducer\";\r\nimport {AppThunkType} from \"./redux-store\";\r\nimport {profileAPI, ResultCodes, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_NEW_PROFILE_POST = 'ADD-NEW-PROFILE-POST'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_USER_STATUS = 'SET_USER_STATUS'\r\n\r\n//types\r\n\r\ntype UserProfileContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\n\r\nexport type UserProfileType = {\r\n    aboutMe: string\r\n    contacts: UserProfileContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: UserPhotoType\r\n} | null\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likeCounts: number\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    userProfile: UserProfileType\r\n    status: string\r\n}\r\n\r\nexport type ProfileReducerACsType =\r\n    ReturnType<typeof addNewProfilePostAC>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setUserStatus>\r\n\r\n//actionCreators\r\nexport const addNewProfilePostAC = (message: string) => {\r\n    return {\r\n        type: ADD_NEW_PROFILE_POST,\r\n        message\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (userProfile: UserProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        userProfile\r\n    } as const\r\n}\r\n\r\nexport const setUserStatus = (status: string) => {\r\n    return {\r\n        type: SET_USER_STATUS,\r\n        status\r\n    } as const\r\n}\r\n\r\n//initialState\r\nconst initialState: ProfilePageType = {\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: \"Hi, my name is George and this is my first social network project\",\r\n            likeCounts: 10000\r\n        },\r\n        {id: 2, message: \"Hi there, I learned how to push props\", likeCounts: 45},\r\n        {id: 3, message: \"Hi there, I learned map\", likeCounts: 666},\r\n        {id: 4, message: \"Hi there, I learned filter\", likeCounts: 67}\r\n    ],\r\n    userProfile: null,\r\n    status: ''\r\n}\r\n\r\n//reducer\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ProfileReducerACsType): ProfilePageType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_NEW_PROFILE_POST:\r\n            const newPost: PostType = {\r\n                id: Math.random() * 100,\r\n                message: action.message,\r\n                likeCounts: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                userProfile: action.userProfile\r\n            }\r\n        case SET_USER_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserProfileSuccess = (userId: string): AppThunkType => (dispatch) => {\r\n    profileAPI.getProfile(userId)\r\n        .then(data => {\r\n            dispatch(setUserProfile(data))\r\n        })\r\n}\r\n\r\nexport const getUserStatus = (userId: string): AppThunkType => (dispatch) => {\r\n    profileAPI.getStatus(userId)\r\n        .then(data => {\r\n            dispatch(setUserStatus(data))\r\n        })\r\n}\r\n\r\nexport const updateUserStatus = (status: string): AppThunkType => (dispatch) => {\r\n    profileAPI.updateStatus(status)\r\n        .then(data => {\r\n            debugger\r\n            if (data.resultCode === ResultCodes.Success) {\r\n                dispatch(setUserStatus(status))\r\n            }\r\n        })\r\n}","const ADD_NEW_DIALOG_MESSAGE = 'ADD-NEW-DIALOG-MESSAGE'\r\n\r\n//types\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\n\r\nexport type DialogPageACsType =\r\n    ReturnType<typeof addNewDialogMessageAC>\r\n\r\n//actionCreators\r\nexport const addNewDialogMessageAC = (message: string) => {\r\n    return {\r\n        type: ADD_NEW_DIALOG_MESSAGE,\r\n        message\r\n    } as const\r\n}\r\n\r\nconst initialState: DialogPageType = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"George\",\r\n            avatar: \"https://cdn4.iconfinder.com/data/icons/avatars-xmas-giveaway/128/batman_hero_avatar_comics-512.png\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Paul\",\r\n            avatar: \"https://cdn4.iconfinder.com/data/icons/avatars-xmas-giveaway/128/batman_hero_avatar_comics-512.png\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Natasha\",\r\n            avatar: \"https://cdn4.iconfinder.com/data/icons/avatars-xmas-giveaway/128/batman_hero_avatar_comics-512.png\"\r\n        }\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your wellness?\"},\r\n        {id: 3, message: \"Where do you go?\"},\r\n    ],\r\n}\r\n\r\n//reducer\r\nexport const dialogsReducer = (state: DialogPageType = initialState, action: DialogPageACsType): DialogPageType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_DIALOG_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: Math.random() * 100,\r\n                message: action.message\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","\r\ntype FriendType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nexport type SidebarType = {\r\n    friends: Array<FriendType>\r\n}\r\n\r\n\r\nconst initialState: SidebarType = {\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: \"Elena\",\r\n            avatar: \"https://cdn4.iconfinder.com/data/icons/avatars-xmas-giveaway/128/batman_hero_avatar_comics-512.png\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Dima\",\r\n            avatar: \"https://cdn4.iconfinder.com/data/icons/avatars-xmas-giveaway/128/batman_hero_avatar_comics-512.png\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Olga\",\r\n            avatar: \"https://cdn4.iconfinder.com/data/icons/avatars-xmas-giveaway/128/batman_hero_avatar_comics-512.png\"\r\n        },\r\n    ]\r\n}\r\n\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: any): SidebarType => {\r\n    return state\r\n}","import {AppThunkType} from \"./redux-store\";\r\nimport {authAPI, ResultCodeForCaptcha, ResultCodes} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_AUTH_USER_DATA = 'SET_AUTH_USER_DATA'\r\n\r\n//types\r\nexport type AuthType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport type LoginType = {}\r\n\r\nexport type AuthReducerACsType = ReturnType<typeof setAuthUserData>\r\n\r\nexport type StopSubmitACType = ReturnType<typeof stopSubmit>\r\n\r\n//actionCreators\r\nexport const setAuthUserData = (data: AuthType) => {\r\n    return {\r\n        type: SET_AUTH_USER_DATA,\r\n        data\r\n    } as const\r\n}\r\n\r\n//initialState\r\nconst initialState: AuthType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\n//reducer\r\nexport const authReducer = (state: AuthType = initialState, action: AuthReducerACsType): AuthType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA:\r\n            return {...state, ...action.data}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//thunks\r\nexport const authMe = (): AppThunkType => (dispatch) => {\r\n    return authAPI.authMe()\r\n        .then(data => {\r\n            if (data.resultCode === ResultCodes.Success) {\r\n                const {id, email, login} = data.data\r\n                dispatch(setAuthUserData({\r\n                    userId: id,\r\n                    email,\r\n                    login,\r\n                    isAuth: true\r\n                }))\r\n            }\r\n        })\r\n}\r\n\r\nexport const loginMe = (email: string, password: string, rememberMe: boolean): AppThunkType => (dispatch) => {\r\n    authAPI.loginMe(email, password, rememberMe)\r\n        .then(data => {\r\n            if (data.resultCode === ResultCodes.Success) {\r\n                dispatch(authMe())\r\n            } else if (data.messages.length > 0) {\r\n                let message = data.messages[0]\r\n                dispatch(stopSubmit('login', {_error: message}))\r\n            }\r\n        })\r\n}\r\n\r\nexport const logout = (): AppThunkType => (dispatch) => {\r\n    authAPI.logout()\r\n        .then(data => {\r\n            if (data.resultCode === ResultCodes.Success) {\r\n                dispatch(setAuthUserData({\r\n                    userId: null,\r\n                    email: null,\r\n                    login: null,\r\n                    isAuth: false\r\n                }))\r\n            }\r\n        })\r\n}","import {AppThunkType} from \"./redux-store\";\r\nimport {authMe} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\n//types\r\ntype  initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nexport type AppReducerACsType = ReturnType<typeof initializedSuccess>\r\n\r\n//actionCreators\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS\r\n    } as const\r\n}\r\n\r\n//initialState\r\nconst initialState: initialStateType = {\r\n    initialized: false\r\n}\r\n\r\n//reducer\r\nexport const appReducer = (state: initialStateType = initialState, action: AppReducerACsType): initialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {...state, initialized: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializeApp = (): AppThunkType => (dispatch) => {\r\n    let promise = dispatch(authMe())\r\n    Promise.all([promise]).then(\r\n        () => {\r\n            dispatch(initializedSuccess())\r\n        }\r\n    )\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {usersReducer, UsersReducerACsType} from \"./users-reducer\";\r\nimport {profileReducer, ProfileReducerACsType} from \"./profile-reducer\";\r\nimport {DialogPageACsType, dialogsReducer} from \"./dialog-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {authReducer, AuthReducerACsType, StopSubmitACType} from \"./auth-reducer\";\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer, AppReducerACsType} from \"./app-reducer\";\r\n\r\n//types\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n//type of all actions\r\nexport type AppActionsType = UsersReducerACsType | ProfileReducerACsType | DialogPageACsType | AuthReducerACsType | StopSubmitACType | AppReducerACsType\r\n\r\n//if we want to use thunk inside thunk we need to use this type\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AppActionsType>\r\n\r\n//main reducer\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    sidebar: sidebarReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\n\r\n\r\n//create store\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store;\r\n\r\n","import React from \"react\";\r\n\r\nconst News = ()=>{\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\n\r\nconst Music = ()=>{\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\n\r\nconst Settings = ()=>{\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from \"./Navbar.module.css\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink  to=\"/profile\" activeClassName={classes.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={classes.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/users\" activeClassName={classes.active}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/news\" activeClassName={classes.active}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/music\" activeClassName={classes.active}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to=\"/settings\" activeClassName={classes.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport cls from \"./FriendInfo.module.css\"\r\n\r\ntype FriendInfoType = {\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nconst FriendInfo: React.FC<FriendInfoType> = (props) => {\r\n\r\n    return (\r\n        <div className={cls.friend_info}>\r\n            <div>\r\n                <div className={cls.friends_avatar}>\r\n                    <img src={props.avatar} alt=\"#\"/>\r\n                </div>\r\n                <div>{props.name}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FriendInfo;","import React from \"react\";\r\nimport cls from \"./FriendsBar.module.css\"\r\nimport FriendInfo from \"./FriendInfo/FriendInfo\";\r\nimport {FriendsBarType} from \"./FriendsBarContainer\";\r\n\r\n\r\nconst FriendsBar: React.FC<FriendsBarType> = (props) => {\r\n    const mappedFriends = props.sidebar.friends.map(fr => <FriendInfo key={fr.id} name={fr.name} avatar={fr.avatar}/>)\r\n\r\n    return (\r\n        <div className={cls.friends_bar}>\r\n            <h2>FRIENDS</h2>\r\n            <div className={cls.friends_info_wrapper}>\r\n                {\r\n                    mappedFriends\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FriendsBar;","import FriendsBar from \"./FriendsBar\";\r\nimport {connect} from \"react-redux\";\r\nimport {SidebarType} from \"../../../redux/sidebar-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//types\r\ntype MapStatePropsType = {\r\n    sidebar: SidebarType\r\n}\r\ntype MapDispatchPropsType = {\r\n\r\n}\r\n\r\nexport type FriendsBarType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {}\r\n}\r\n\r\nconst FriendsBarContainer = connect(mapStateToProps, mapDispatchToProps)(FriendsBar)\r\n\r\nexport default FriendsBarContainer;","import React from \"react\";\r\nimport cls from \"./Sidebar.module.css\"\r\nimport Navbar from \"./Navbar/Navbar\";\r\nimport FriendsBarContainer from \"./FriendsBar/FriendsBarContainer\";\r\n\r\n\r\nconst Sidebar = () => {\r\n    return (\r\n        <div className={cls.sidebar}>\r\n            <Navbar/>\r\n            <FriendsBarContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Sidebar;\r\n\r\n","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport classes from \"./DialogItem.module.css\"\r\n\r\n\r\nexport type DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nexport const DialogItem: React.FC<DialogItemPropsType> = (props) => {\r\n    return (\r\n        <div className={classes.dialog}>\r\n                <NavLink to={\"/dialogs/\" + props.id} className={classes.name}>\r\n                    <img src={props.avatar} alt=\"#\"/>\r\n                    {props.name}\r\n                </NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport classes from \"./Message.module.css\";\r\n\r\n\r\ntype MessagePropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessagePropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.message}>{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport cls from './FormsControls.module.css'\r\n\r\ntype CustomFieldProp = {\r\n    placeholder?: string\r\n}\r\n\r\n//HOC for textarea and input\r\nexport const Element = (ElementWrapper: any) => ({meta, input, ...restProps}: WrappedFieldProps & CustomFieldProp) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div>\r\n            <div className={`${cls.formsControl} ${hasError ? cls.error : ''}`}>\r\n                <ElementWrapper {...input} {...restProps}/>\r\n            </div>\r\n            {hasError && <span className={cls.error}>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// export const Textarea: React.FC<WrappedFieldProps & CustomFieldProp> = ({input, meta, ...restProps}) => {\r\n//\r\n//     const hasError = meta.touched && meta.error\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div className={`${cls.formsControl} ${hasError ? cls.error : ''}`}>\r\n//                 <textarea {...input} {...restProps}/>\r\n//             </div>\r\n//             {hasError && <span className={cls.error}>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const Input: React.FC<WrappedFieldProps & CustomFieldProp> = ({input, meta, ...restProps}) => {\r\n//     debugger\r\n//\r\n//     const hasError = meta.touched && meta.error\r\n//\r\n//     return (\r\n//         <div>\r\n//             <div className={`${cls.formsControl} ${hasError ? cls.error : ''}`}>\r\n//                 <input {...input} {...restProps}/>\r\n//             </div>\r\n//             {hasError && <span className={cls.error}>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (length: number) => (value: string) => {\r\n    if (value.length > length) return `Max length is ${length} symbols`\r\n    return undefined\r\n}","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Element} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    newDialogMessage: string\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    const mappedDialogs = props.dialogPage.dialogs.map(d => {\r\n        return (\r\n            <DialogItem key={d.id} id={d.id} name={d.name} avatar={d.avatar}/>\r\n        )\r\n    })\r\n\r\n    const mappedMessages = props.dialogPage.messages.map(m => {\r\n        return (\r\n            <Message key={m.id} id={m.id} message={m.message}/>\r\n        )\r\n    })\r\n\r\n    const onSubmitHandler = (values: FormDataType) => {\r\n        props.addNewDialogMessage(values.newDialogMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialog_items}>\r\n                {mappedDialogs}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {mappedMessages}\r\n                <NewDialogMessageReduxForm onSubmit={onSubmitHandler}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst Textarea = Element('textarea')\r\n\r\nconst NewDialogMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                name={'newDialogMessage'}\r\n                component={Textarea}\r\n                validate={[required, maxLength50]}\r\n            />\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst NewDialogMessageReduxForm = reduxForm<FormDataType>({form: 'DialogMessageForm'})(NewDialogMessageForm)","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect(Component: ComponentType) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n\r\n}","import {addNewDialogMessageAC, DialogPageType} from \"../../redux/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {ComponentType} from \"react\";\r\n\r\n//types\r\ntype MapStatePropsType = {\r\n    dialogPage: DialogPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addNewDialogMessage: (message: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n//functions for 'connect'\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addNewDialogMessage: (message: string) => {\r\n            dispatch(addNewDialogMessageAC(message))\r\n        }\r\n    }\r\n}\r\n\r\n//container component\r\n// export default connect(mapStateToProps, mapDispatchToProps)(withAuthRedirect(Dialogs))\r\n\r\n//use compose\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n","export default __webpack_public_path__ + \"static/media/preloader.4d3101de.svg\";","import React from \"react\";\r\nimport preloader from \"../../images/preloader.svg\";\r\n\r\nexport const Preloader = () => {\r\n    return(\r\n        <div>\r\n            <img src={preloader} alt=\"preloader\"/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\ntype StateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n\r\n\r\n    state: StateType = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n\r\n    onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileStatusPropsType, prevState: StateType) {\r\n        if (prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {!this.state.editMode &&\r\n                    <span onDoubleClick={this.activateMode}>{this.props.status || 'No status'}</span>}\r\n                </div>\r\n                <div>\r\n                    {this.state.editMode && <input\r\n                        autoFocus\r\n                        onChange={this.onChangeHandler}\r\n                        onBlur={this.deactivateMode}\r\n                        value={this.state.status}/>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import classes from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport {Preloader} from \"../../common/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\n\r\nconst ProfileInfo: React.FC<ProfilePropsType> = React.memo((props) => {\r\n\r\n    if (!props.userProfile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.background_image}>\r\n                <img\r\n                    src=\"https://images.unsplash.com/photo-1596313072836-5b6bbce5780d?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1616&q=80\"\r\n                    alt=\"street\"/>\r\n            </div>\r\n            <div className={classes.avatar}>\r\n                <img\r\n                    src={props.userProfile.photos.small ? props.userProfile.photos.small : ''}\r\n                    alt=\"avatar\"/>\r\n            </div>\r\n\r\n            <ProfileStatus\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport classes from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likeCounts: number\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={classes.post}>\r\n            <div className={`${classes.item} ${classes.active}`}>\r\n                {props.message}\r\n            </div>\r\n            <img\r\n                src=\"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80\"\r\n                alt=\"woman\"/>\r\n            <div>\r\n                    <span>\r\n                        {props.likeCounts} like\r\n                    </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Element} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype FormDataType = {\r\n    newPostMessage: string\r\n}\r\n\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n\r\n\r\n    const mappedPosts = props.profilePageState.posts.map(p => <Post key={p.id} id={p.id} message={p.message}\r\n                                                                    likeCounts={p.likeCounts}/>)\r\n\r\n    const onSubmitHandler = (values: FormDataType) => {\r\n        props.addPost(values.newPostMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.post_wrapper}>\r\n            <div>\r\n                My posts\r\n            </div>\r\n            <NewPostMessageReduxForm onSubmit={onSubmitHandler}/>\r\n            <div className={classes.posts}>\r\n                {\r\n                    mappedPosts\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default MyPosts;\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst Textarea = Element('textarea')\r\n\r\nconst NewPostMessage: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name={'newPostMessage'}\r\n                    component={Textarea} //в Textarea приходят пропсы input, meta, ...restProps\r\n                    validate={[required, maxLength10]}\r\n                    placeholder={'Enter new message'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst NewPostMessageReduxForm = reduxForm<FormDataType>({form: 'PostMessageForm'})(NewPostMessage)\r\n","import {addNewProfilePostAC, ProfilePageType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//types\r\ntype MapStatePropsType = {\r\n    profilePageState: ProfilePageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (message: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n//functions for 'connect'\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profilePageState: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (message: string) => {\r\n            dispatch(addNewProfilePostAC(message))\r\n        }\r\n    }\r\n}\r\n\r\n//container component\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport classes from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\n\r\nexport type ProfilePropsType = {\r\n    userProfile: UserProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <ProfileInfo\r\n                userProfile={props.userProfile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {ComponentType} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getUserStatus, setUserProfileSuccess, updateUserStatus, UserProfileType} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype ParamsPropsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateType = {\r\n    userProfile: UserProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchType = {\r\n    setUserProfileSuccess: (id: string) => void\r\n    getUserStatus: (id: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\nexport type ProfileContainerPropsType = MapStateType & MapDispatchType & RouteComponentProps<ParamsPropsType>\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            this.props.authorizedUserId\r\n                ?\r\n                userId = this.props.authorizedUserId.toString()\r\n                :\r\n                this.props.history.push('/login')\r\n        }\r\n        //our thunk\r\n        this.props.setUserProfileSuccess(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile userProfile={this.props.userProfile} status={this.props.status}\r\n                         updateUserStatus={this.props.updateUserStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapState = (state: AppStateType): MapStateType => {\r\n    return {\r\n        userProfile: state.profilePage.userProfile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n// let WitUrlDataContainerComponent = withRouter(AuthRedirectComponent) //- здесь мы создали отдельную перменную-ссылку и прокинули её в connect\r\n// export default connect(mapState, {setUserProfileSuccess})(WitUrlDataContainerComponent)\r\n\r\n//export default connect(mapState, {setUserProfileSuccess})(withRouter(withAuthRedirect(ProfileContainer)))\r\n\r\n\r\n//use compose\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapState, {setUserProfileSuccess, getUserStatus, updateUserStatus})\r\n)(ProfileContainer)","export default __webpack_public_path__ + \"static/media/nodejs.a02ab828.png\";","import React from 'react';\r\nimport cls from \"./Header.module.css\";\r\nimport logo from \"../../images/nodejs.png\"\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype HeaderPropsType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n\r\n    const {\r\n        userId,\r\n        email,\r\n        isAuth,\r\n        login,\r\n        logout\r\n    } = props\r\n\r\n    return (\r\n        <header className={cls.header}>\r\n            <img src={logo}\r\n                 alt=\"logo\"/>\r\n            <div className={cls.loginBlock}>\r\n                {\r\n                    isAuth\r\n                        ?\r\n                        <div>\r\n                            <div>\r\n                                {login}\r\n                            </div>\r\n                            <div>\r\n                                <button onClick={logout}>Log out</button>\r\n                            </div>\r\n                        </div>\r\n                        :\r\n                        <NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {AuthType, logout} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype HeaderContainerPropsType = {\r\n    logout: () => void\r\n} & AuthType\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapState = (state: AppStateType): AuthType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n        email: state.auth.email,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nexport default connect(mapState, {logout})(HeaderContainer)","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginMe} from \"../../redux/auth-reducer\";\r\nimport {Element} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport cls from './../common/FormsControls/FormsControls.module.css'\r\n\r\ntype FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst Input = Element('input')\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'login'}\r\n                    name={'login'}\r\n                    component={Input}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={'password'}\r\n                    name={'password'}\r\n                    component={Input}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}/>\r\n            </div>\r\n            {\r\n                props.error && <div className={cls.resultError}>\r\n                    {props.error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props: mapDispatchToPropsType) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.loginMe(formData.login, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            {/*this callback => (onSubmit) will be called by handleSubmit callback in tag <form/>.\r\n            handleSubmit call:\r\n            1) e.preventDefault\r\n            2) get all form data and put them to object\r\n            3) calls onSubmit(formData) => callback in LoginReduxForm\r\n            */}\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    loginMe: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nexport default connect(null, {loginMe})(Login)","import React from \"react\";\r\nimport {UserPhotoType} from \"../../redux/users-reducer\";\r\nimport cls from \"./Users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {usersAPI} from \"../../api/api\";\r\n\r\nexport type UserPropsType = {\r\n    id: number\r\n    photos: UserPhotoType\r\n    name: string\r\n    status: string\r\n    followed: boolean\r\n    followingInProgress: Array<number>\r\n    followSuccess: (userid: number) => void\r\n    unFollowSuccess: (userid: number) => void\r\n}\r\n\r\nexport const User: React.FC<UserPropsType> = React.memo((props) => {\r\n\r\n    console.log('User')\r\n\r\n    const {\r\n        id,\r\n        photos,\r\n        name,\r\n        status,\r\n        followed,\r\n        followingInProgress,\r\n        followSuccess,\r\n        unFollowSuccess\r\n    } = props\r\n\r\n    return (\r\n        <div className={cls.wrapper_user}>\r\n            <div className={cls.avatar_button}>\r\n                <div className={cls.avatar}>\r\n                    <NavLink to={'/profile/' + id}>\r\n                        <img\r\n                            src={photos.small !== null ? photos.small : 'https://cdn4.iconfinder.com/data/icons/avatars-xmas-giveaway/128/batman_hero_avatar_comics-512.png'}\r\n                        />\r\n                    </NavLink>\r\n                </div>\r\n                <div className={cls.button_wrapper}>\r\n                    {\r\n                        followed\r\n                            ?\r\n                            <button disabled={followingInProgress.some(uId => uId === id)} onClick={() => {\r\n                                //our thunk\r\n                                unFollowSuccess(id)\r\n                            }}> Unfollow </button>\r\n                            :\r\n                            <button disabled={followingInProgress.some(uId => uId === id)} onClick={() => {\r\n                                //our thunk\r\n                                followSuccess(id)\r\n                            }}> Follow </button>\r\n                    }\r\n                    {/*<button*/}\r\n                    {/*    onClick={followed ? () => unFollowUser(id) : () => followUser(id)}>{followed ? 'Unfollow' : 'Follow'}</button>*/}\r\n                </div>\r\n            </div>\r\n            <div className={cls.description}>\r\n                <div>{name}</div>\r\n                {/*<div>{u.location.city}, {u.location.country}</div>*/}\r\n                <div>{!status ? 'Status not find' : status}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport cls from \"./Users.module.css\";\r\nimport {v1} from \"uuid\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {User} from \"./User\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersAmount: number\r\n    currentPage: number\r\n    onPageChanged: (page: number) => void\r\n    followingInProgress: Array<number>\r\n    followSuccess: (userid: number) => void\r\n    unFollowSuccess: (userid: number) => void\r\n}\r\n\r\n\r\nexport const Users: React.FC<UsersPropsType> = (props) => {\r\n\r\n    let pagesCount = Math.ceil((props.totalUsersAmount / props.pageSize))\r\n\r\n    let pages = []\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <span className={cls.spanPagesName}>Pages: </span>\r\n            {\r\n                pages.map(p => {\r\n                    return (\r\n                        <span\r\n                            key={v1()}\r\n                            className={p === props.currentPage ? `${cls.selectedPage} ${cls.spanPageNumber}` : cls.spanPageNumber}\r\n                            onClick={() => props.onPageChanged(p)}\r\n                        >{p}</span>\r\n                    )\r\n                })\r\n            }\r\n            {\r\n                props.users.map(u => {\r\n                    return (\r\n                        <User\r\n                            key={u.id}\r\n                            id={u.id}\r\n                            photos={u.photos}\r\n                            name={u.name}\r\n                            status={u.status}\r\n                            followed={u.followed}\r\n                            followingInProgress={props.followingInProgress}\r\n                            followSuccess={props.followSuccess}\r\n                            unFollowSuccess={props.unFollowSuccess}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersAmount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersAmount\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {followSuccess, requestUsers, setCurrentPage, unFollowSuccess, UserType} from \"../../redux/users-reducer\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersAmount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype MapStateType = {\r\n    users: Array<UserType>,\r\n    currentPage: number,\r\n    pageSize: number,\r\n    totalUsersAmount: number,\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchType = {\r\n    setCurrentPage: (page: number) => void\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n    followSuccess: (userid: number) => void\r\n    unFollowSuccess: (userid: number) => void\r\n}\r\n\r\ntype UsersPropsType = MapStateType & MapDispatchType\r\n\r\n\r\n//UsersContainer получает props чререз connect, отправляет запросы на сервер, отрисовывает\r\n//презентационную (тупую) компоненту Users\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n\r\n    componentDidMount() {\r\n        //our thunk\r\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.setCurrentPage(page)\r\n        //our thunk\r\n        this.props.requestUsers(page, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    this.props.isFetching\r\n                        ?\r\n                        <Preloader/>\r\n                        :\r\n                        <Users\r\n                            users={this.props.users}\r\n                            currentPage={this.props.currentPage}\r\n                            pageSize={this.props.pageSize}\r\n                            totalUsersAmount={this.props.totalUsersAmount}\r\n                            onPageChanged={this.onPageChanged}\r\n                            followingInProgress={this.props.followingInProgress}\r\n                            followSuccess={this.props.followSuccess}\r\n                            unFollowSuccess={this.props.unFollowSuccess}\r\n                        />\r\n                }\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapState = (state: AppStateType): MapStateType => {\r\n    return {\r\n        users: getUsers(state),\r\n        currentPage: getCurrentPage(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersAmount: getTotalUsersAmount(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n// const mapState = (state: AppStateType): MapStateType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersAmount: state.usersPage.totalUsersAmount,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\n// const mapDispatch = (dispatch: Dispatch): MapDispatchType => {\r\n//     return {\r\n//         followUser: (userID: number) => {\r\n//             dispatch(followAC(userID))\r\n//         },\r\n//         unFollowUser: (userID: number) => {\r\n//             dispatch(unFollow(userID))\r\n//         },\r\n//         setUsers: (users: Array<UserType>) => {\r\n//             dispatch(setUsers(users))\r\n//         },\r\n//         setCurrentPage: (page: number) => {\r\n//             dispatch(setCurrentPage(page))\r\n//         },\r\n//         setIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetching(isFetching))\r\n//         }\r\n//         // setTotalUsersCount: (totalCount: number) => {\r\n//         //     dispatch(setUserTotalCountAC(totalCount))\r\n//         // }\r\n//     }\r\n// }\r\n\r\nexport default connect(mapState, {\r\n    setCurrentPage,\r\n    requestUsers,\r\n    followSuccess,\r\n    unFollowSuccess\r\n})(UsersContainer)\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport './App.css';\r\nimport {Redirect, Route, withRouter} from \"react-router-dom\"\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport Sidebar from \"./components/Sidebar/Sidebar\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/common/Preloader\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\n\r\n\r\ntype AppPropsType = {} & mapDispatchToPropsType & mapStateToProps\r\n\r\n\r\ntype mapStateToProps = {\r\n    initialize: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n    componentDidMount() {\r\n        //our thunk\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialize) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className=\"app-wrapper\">\r\n                <HeaderContainer/>\r\n                <Sidebar/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Route path={'/'} exact render={() => <Redirect to={'/profile'}/>}/>\r\n                    <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                    <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                    <Route path=\"/login\" render={() => <Login/>}/>\r\n                    <Route path=\"/news\" render={() => <News/>}/>\r\n                    <Route path=\"/music\" component={Music}/>\r\n                    <Route path=\"/settings\" component={Settings}/>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialize: state.app.initialized\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))\r\n(App)\r\n\r\n\r\n","import './index.css';\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./redux/redux-store\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./App\";\r\nimport React from \"react\";\r\n\r\nReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>,\r\n        document.getElementById('root'));\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formsControl\":\"FormsControls_formsControl__25irS\",\"error\":\"FormsControls_error__1fQeM\",\"resultError\":\"FormsControls_resultError__DAotX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__y2bjf\",\"dialog_items\":\"Dialogs_dialog_items__3jMoA\",\"messages\":\"Dialogs_messages__3r7q9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2m-Dy\",\"active\":\"Post_active__2uU_Z\",\"post\":\"Post_post__1ODuq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends_bar\":\"FriendsBar_friends_bar__2VewV\",\"friends_info_wrapper\":\"FriendsBar_friends_info_wrapper__1LZd3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends_avatar\":\"FriendInfo_friends_avatar__Gnkbt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__f39Su\",\"name\":\"DialogItem_name__1MYCL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background_image\":\"ProfileInfo_background_image__1N_TX\",\"avatar\":\"ProfileInfo_avatar__KoSC-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_wrapper\":\"MyPosts_post_wrapper__vzWi1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2-jkd\",\"loginBlock\":\"Header_loginBlock__3idvV\"};"],"sourceRoot":""}